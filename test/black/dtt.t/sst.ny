{` Unary Gel-types `}
def Gel (A : Type) (A' : A ‚Üí Type) : Type‚ÅΩ·µà‚Åæ A ‚âî sig x ‚Ü¶ (ungel : A' x)

{` The definition of semi-simplicial types `}
def SST : Type ‚âî codata [
| X .z : Type
| X .s : (X .z) ‚Üí SST‚ÅΩ·µà‚Åæ X
]

` Extracting some low-dimensional simplices
def 0s (X : SST) : Type ‚âî X .z

def 1s (X : SST) (x‚ÇÄ x‚ÇÅ : 0s X) : Type ‚âî X .s x‚ÇÄ .z x‚ÇÅ

def 2s (X : SST) (x‚ÇÄ x‚ÇÅ : 0s X) (x‚ÇÄ‚ÇÅ : 1s X x‚ÇÄ x‚ÇÅ) (x‚ÇÇ : 0s X) (x‚ÇÄ‚ÇÇ : 1s X x‚ÇÄ x‚ÇÇ) (x‚ÇÅ‚ÇÇ : 1s X x‚ÇÅ x‚ÇÇ) : Type
  ‚âî X .s x‚ÇÄ .s x‚ÇÅ x‚ÇÄ‚ÇÅ .z x‚ÇÇ x‚ÇÄ‚ÇÇ x‚ÇÅ‚ÇÇ

def 3s (X : SST) (x‚ÇÄ x‚ÇÅ : 0s X) (x‚ÇÄ‚ÇÅ : 1s X x‚ÇÄ x‚ÇÅ) (x‚ÇÇ : 0s X) (x‚ÇÄ‚ÇÇ : 1s X x‚ÇÄ x‚ÇÇ) (x‚ÇÅ‚ÇÇ : 1s X x‚ÇÅ x‚ÇÇ) (x‚ÇÄ‚ÇÅ‚ÇÇ : 2s X x‚ÇÄ x‚ÇÅ x‚ÇÄ‚ÇÅ x‚ÇÇ x‚ÇÄ‚ÇÇ x‚ÇÅ‚ÇÇ)
  (x‚ÇÉ : 0s X) (x‚ÇÄ‚ÇÉ : 1s X x‚ÇÄ x‚ÇÉ) (x‚ÇÅ‚ÇÉ : 1s X x‚ÇÅ x‚ÇÉ) (x‚ÇÄ‚ÇÅ‚ÇÉ : 2s X x‚ÇÄ x‚ÇÅ x‚ÇÄ‚ÇÅ x‚ÇÉ x‚ÇÄ‚ÇÉ x‚ÇÅ‚ÇÉ)
  (x‚ÇÇ‚ÇÉ : 1s X x‚ÇÇ x‚ÇÉ) (x‚ÇÄ‚ÇÇ‚ÇÉ : 2s X x‚ÇÄ x‚ÇÇ x‚ÇÄ‚ÇÇ x‚ÇÉ x‚ÇÄ‚ÇÉ x‚ÇÇ‚ÇÉ) (x‚ÇÅ‚ÇÇ‚ÇÉ : 2s X x‚ÇÅ x‚ÇÇ x‚ÇÅ‚ÇÇ x‚ÇÉ x‚ÇÅ‚ÇÉ x‚ÇÇ‚ÇÉ)
  : Type
  ‚âî X .s x‚ÇÄ .s x‚ÇÅ x‚ÇÄ‚ÇÅ .s x‚ÇÇ x‚ÇÄ‚ÇÇ x‚ÇÅ‚ÇÇ x‚ÇÄ‚ÇÅ‚ÇÇ .z x‚ÇÉ x‚ÇÄ‚ÇÉ x‚ÇÅ‚ÇÉ x‚ÇÄ‚ÇÅ‚ÇÉ x‚ÇÇ‚ÇÉ x‚ÇÄ‚ÇÇ‚ÇÉ x‚ÇÅ‚ÇÇ‚ÇÉ

{` Singular SSTs, based on the Martin-Lof jdentity type for now. `}
def eq (A:Type) (x:A) : A ‚Üí Type ‚âî data [ rfl. : eq A x x ]

def Sing (A : Type) : SST ‚âî [
| .z ‚Ü¶ A
| .s ‚Ü¶ x ‚Ü¶ Sing‚ÅΩ·µà‚Åæ A (Gel A (y ‚Ü¶ eq A x y))
]

{` We normalize some low-dimensional simplex types of singular SSTs. `}
axiom A : Type
echo 0s (Sing A)

axiom a‚ÇÄ : 0s (Sing A)
axiom a‚ÇÅ : 0s (Sing A)
echo 1s (Sing A) a‚ÇÄ a‚ÇÅ

axiom a‚ÇÄ‚ÇÅ : 1s (Sing A) a‚ÇÄ a‚ÇÅ
axiom a‚ÇÇ : 0s (Sing A)
axiom a‚ÇÄ‚ÇÇ : 1s (Sing A) a‚ÇÄ a‚ÇÇ
axiom a‚ÇÅ‚ÇÇ : 1s (Sing A) a‚ÇÅ a‚ÇÇ
echo 2s (Sing A) a‚ÇÄ a‚ÇÅ a‚ÇÄ‚ÇÅ a‚ÇÇ a‚ÇÄ‚ÇÇ a‚ÇÅ‚ÇÇ

axiom a‚ÇÄ‚ÇÅ‚ÇÇ : 2s (Sing A) a‚ÇÄ a‚ÇÅ a‚ÇÄ‚ÇÅ a‚ÇÇ a‚ÇÄ‚ÇÇ a‚ÇÅ‚ÇÇ
axiom a‚ÇÉ : 0s (Sing A)
axiom a‚ÇÄ‚ÇÉ : 1s (Sing A) a‚ÇÄ a‚ÇÉ
axiom a‚ÇÅ‚ÇÉ : 1s (Sing A) a‚ÇÅ a‚ÇÉ
axiom a‚ÇÄ‚ÇÅ‚ÇÉ : 2s (Sing A) a‚ÇÄ a‚ÇÅ a‚ÇÄ‚ÇÅ a‚ÇÉ a‚ÇÄ‚ÇÉ a‚ÇÅ‚ÇÉ
axiom a‚ÇÇ‚ÇÉ : 1s (Sing A) a‚ÇÇ a‚ÇÉ
axiom a‚ÇÄ‚ÇÇ‚ÇÉ : 2s (Sing A) a‚ÇÄ a‚ÇÇ a‚ÇÄ‚ÇÇ a‚ÇÉ a‚ÇÄ‚ÇÉ a‚ÇÇ‚ÇÉ
axiom a‚ÇÅ‚ÇÇ‚ÇÉ : 2s (Sing A) a‚ÇÅ a‚ÇÇ a‚ÇÅ‚ÇÇ a‚ÇÉ a‚ÇÅ‚ÇÉ a‚ÇÇ‚ÇÉ
echo 3s (Sing A) a‚ÇÄ a‚ÇÅ a‚ÇÄ‚ÇÅ a‚ÇÇ a‚ÇÄ‚ÇÇ a‚ÇÅ‚ÇÇ a‚ÇÄ‚ÇÅ‚ÇÇ a‚ÇÉ a‚ÇÄ‚ÇÉ a‚ÇÅ‚ÇÉ a‚ÇÄ‚ÇÅ‚ÇÉ a‚ÇÇ‚ÇÉ a‚ÇÄ‚ÇÇ‚ÇÉ a‚ÇÅ‚ÇÇ‚ÇÉ

{` The empty SST `}
def sst.‚àÖ : SST ‚âî [
| .z ‚Ü¶ data [ ]
| .s ‚Ü¶ [ ]
]

{` The unit SST `}
def sst.ùüô : SST ‚âî [
| .z ‚Ü¶ sig ()
| .s ‚Ü¶ _ ‚Ü¶ sst.ùüô‚ÅΩ·µà‚Åæ
]

{` Binary products of SSTs `}
def sst.prod (X Y : SST) : SST ‚âî [
| .z ‚Ü¶ sig ( fst : X .z, snd : Y .z )
| .s ‚Ü¶ xy ‚Ü¶ sst.prod‚ÅΩ·µà‚Åæ X (X .s (xy .fst)) Y (Y .s (xy .snd))
]

{` Dependent Œ£-SSTs require symmetry! `}
def sst.Œ£ (X : SST) (Y : SST‚ÅΩ·µà‚Åæ X) : SST ‚âî [
| .z ‚Ü¶ sig ( fst : X .z, snd : Y .z fst )
| .s ‚Ü¶ xy ‚Ü¶ sst.Œ£‚ÅΩ·µà‚Åæ X (X .s (xy .fst)) Y (sym (Y .s (xy .fst) (xy .snd)))
]

{`
We can check this by hand too:

sst.Œ£‚ÅΩ·µà‚Åæ : (X : SST) (X' : SST‚ÅΩ·µà‚Åæ X) (Y : SST‚ÅΩ·µà‚Åæ X) (Y' : SST‚ÅΩ·µà·µà‚Åæ X X' Y) : SST‚ÅΩ·µà‚Åæ (sst.Œ£ X Y)
sst.Œ£‚ÅΩ·µà‚Åæ X (X .s (xy .fst)) Y : SST‚ÅΩ·µà·µà‚Åæ X (X .s (xy .fst)) Y ‚Üí SST‚ÅΩ·µà‚Åæ (sst.Œ£ X Y)
X : SST
xy .fst : X .z
X .s (xy .fst) : SST‚ÅΩ·µà‚Åæ X
Y : SST‚ÅΩ·µà‚Åæ X
xy .snd : Y .z (xy .fst)
‚àí .s : (X : SST) ‚Üí X .z ‚Üí SST‚ÅΩ·µà‚Åæ X
‚àí .s‚ÅΩ·µà‚Åæ : {X : SST} (X' : SST‚ÅΩ·µà‚Åæ X) (x : X .z) (x' : X' .z x) ‚Üí SST‚ÅΩ·µà·µà‚Åæ X X' (X .s x)
Y .s‚ÅΩ·µà‚Åæ (xy .fst) (xy .snd) : SST‚ÅΩ·µà·µà‚Åæ X Y (X .s (xy .fst))

So the type of "Y .s‚ÅΩ·µà‚Åæ (xy .fst) (xy .snd)" is indeed symmetrized from what "sst.Œ£‚ÅΩ·µà‚Åæ X (X .s (xy .fst)) Y" expects for its argument.  (Note that ".s‚ÅΩ·µà‚Åæ" is not Narya syntax; the field projection has the same syntax at every dimension, I just wrote this for clarity in the by-hand version.)
`}

{` Constant displayed SSTs also require symmetry, as noted in the paper. `}
def sst.const (X Y : SST) : SST‚ÅΩ·µà‚Åæ X ‚âî [
| .z ‚Ü¶ sig _ ‚Ü¶ ( ungel : Y .z )
| .s ‚Ü¶ x y ‚Ü¶ sym (sst.const‚ÅΩ·µà‚Åæ X (X .s x) Y (Y .s (y .ungel)))
]

{` Using constant displayed SSTs, we can define binary sum SSTs. `}
def sst.sum (X Y : SST) : SST ‚âî [
| .z ‚Ü¶ data [ inl. (_ : X .z) | inr. (_ : Y .z) ]
| .s ‚Ü¶ [
  | inl. x ‚Ü¶ sst.sum‚ÅΩ·µà‚Åæ X (X .s x) Y (sst.const Y sst.‚àÖ)
  | inr. y ‚Ü¶ sst.sum‚ÅΩ·µà‚Åæ X (sst.const X sst.‚àÖ) Y (Y .s y)
  ]
]

{` Augmented SSTs are another displayed coinductive. `}
def ASST : Type ‚âî codata [
| X .z : Type
| X .s : ASST‚ÅΩ·µà‚Åæ X
]

{` As is pointedness of an SST. `}
def sst.pt (X : SST) : Type ‚âî codata [
| p .z : X .z
| p .s : sst.pt‚ÅΩ·µà‚Åæ X (X .s (p .z)) p
]

{` And maps of SSTs. `}
def sst.hom (X Y : SST) : Type ‚âî codata [
| f .z : X .z ‚Üí Y .z
| f .s : (x : X .z) ‚Üí sst.hom‚ÅΩ·µà‚Åæ X (X .s x) Y (Y .s (f .z x)) f
]

{` Identities and composition for maps `}
def sst.id (X : SST) : sst.hom X X ‚âî [
| .z ‚Ü¶ x ‚Ü¶ x
| .s ‚Ü¶ x ‚Ü¶ sst.id‚ÅΩ·µà‚Åæ X (X .s x)
]

def sst.comp (X Y Z : SST) (g : sst.hom Y Z) (f : sst.hom X Y) : sst.hom X Z ‚âî [
| .z ‚Ü¶ x ‚Ü¶ g .z (f .z x)
| .s ‚Ü¶ x ‚Ü¶ sst.comp‚ÅΩ·µà‚Åæ X (X .s x) Y (Y .s (f .z x)) Z (Z .s (g .z (f .z x))) g (g .s (f .z x)) f (f .s x)
]

{` Universal maps `}
def sst.abort (X : SST) : sst.hom sst.‚àÖ X ‚âî [
| .z ‚Ü¶ [ ]
| .s ‚Ü¶ [ ]
]

def sst.uniq (X : SST) : sst.hom X sst.ùüô ‚âî [
| .z ‚Ü¶ _ ‚Ü¶ ()
| .s ‚Ü¶ x ‚Ü¶ sst.uniq‚ÅΩ·µà‚Åæ X (X .s x)
]

def sst.pair (X Y Z : SST) (f : sst.hom X Y) (g : sst.hom X Z) : sst.hom X (sst.prod Y Z) ‚âî [
| .z ‚Ü¶ x ‚Ü¶ (f .z x, g .z x)
| .s ‚Ü¶ x ‚Ü¶ sst.pair‚ÅΩ·µà‚Åæ X (X .s x) Y (Y .s (f .z x)) Z (Z .s (g .z x)) f (f .s x) g (g .s x)
]

{` Copairing requires a displayed version of abort.  And for that, we can't match directly against (x' .ungel) since it isn't a variable, so we have to define a helper function first. `}
def sst.abortz (X : Type) : sst.‚àÖ .z ‚Üí X ‚âî [ ]

def sst.const_abort (X Y : SST) (Y' : SST‚ÅΩ·µà‚Åæ Y) (f : sst.hom X Y) : sst.hom‚ÅΩ·µà‚Åæ X (sst.const X sst.‚àÖ) Y Y' f ‚âî [
| .z ‚Ü¶ x x' ‚Ü¶ sst.abortz (Y' .z (f .z x)) (x' .ungel)
| .s ‚Ü¶ x x' ‚Ü¶ sst.abortz
  {` Ideally, this big long argument should be obtainable by unification. `}
	(sst.hom‚ÅΩ·µà·µà‚Åæ
    X (sst.const X sst.‚àÖ) (X .s x) (sym (sst.const‚ÅΩ·µà‚Åæ X (X .s x) sst.‚àÖ (sst.‚àÖ .s (x' .ungel))))
    Y Y' (Y .s (f .z x)) (Y' .s (f .z x) (sst.abortz (Y' .z (f .z x)) (x' .ungel)))
    f (sst.const_abort X Y Y' f) (f .s x))
  (x' .ungel)
]

def sst.copair (X Y Z : SST) (f : sst.hom X Z) (g : sst.hom Y Z) : sst.hom (sst.sum X Y) Z ‚âî [
| .z ‚Ü¶ [ inl. x ‚Ü¶ f .z x | inr. y ‚Ü¶ g .z y ]
| .s ‚Ü¶ [
  | inl. x ‚Ü¶ sst.copair‚ÅΩ·µà‚Åæ X (X .s x) Y (sst.const Y sst.‚àÖ) Z (Z .s (f .z x))
                f (f .s x) g (sst.const_abort Y Z (Z .s (f .z x)) g)
  | inr. y ‚Ü¶ sst.copair‚ÅΩ·µà‚Åæ X (sst.const X sst.‚àÖ) Y (Y .s y) Z (Z .s (g .z y))
                f (sst.const_abort X Z (Z .s (g .z y)) f) g (g .s y)
  ]
]
